using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Container.Vulnerability.Agent.Shell;
using Hangfire;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Container.Vulnerability.Agent
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var host = new WebHostBuilder()
                .ConfigureAppConfiguration((hostContext, configApp) =>
                {
                    configApp.SetBasePath(Directory.GetCurrentDirectory());
                    configApp.AddJsonFile("appsettings.json", optional: true);
                    configApp.AddJsonFile(
                        $"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json",
                        optional: true);
                    configApp.AddEnvironmentVariables(prefix: "PREFIX_");
                    configApp.AddCommandLine(args);
                })
                .ConfigureServices((hostContext, services) =>
                {
                    services.AddLogging();
                    services.AddHostedService<KubernetesRoutines>();

                    bool isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);

                    if (isWindows)
                    {
                        services.AddTransient<ICommandLine, CommandLineWindows>();
                    }
                    else
                    {
                        services.AddTransient<ICommandLine, CommandLineBashLinux>();
                    }
                })
                .ConfigureLogging((hostContext, configLogging) =>
                {
                    configLogging.AddConsole();
                    configLogging.AddDebug();
                })
                .Configure(app =>
                {
                    app.UseHangfireServer();
                    app.UseHangfireDashboard();
                })
                .Build();

            await host.RunAsync();
        }
    }
}
