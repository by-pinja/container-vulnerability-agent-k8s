using System;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using k8s;
using McMaster.Extensions.CommandLineUtils;
using Newtonsoft.Json.Linq;

namespace Container.Vulnerability.Agent.K8s
{
    class Program
    {
        static int Main(string[] args)
        {
            var app = new CommandLineApplication();

            app.HelpOption();

            var proxyHost = app.Option<string>(
                "--kubeProxy:<URL>",
                "Kubernetes api proxy address (example http://127.0.0.1:8001). If address is not defined tool excepts to be running inside of pod in cluster.",
                CommandOptionType.SingleOrNoValue);

            var apiUriOption = app.Option<string>("--scannerApi:<API_URL>", "Uri of scanner api (example http://localhost:5000). If left empty agent prints what it should send to api if defined.", CommandOptionType.SingleOrNoValue);
            var basicAuthOption = app.Option<string>("--auth:<USERNAME_AND_PASSWORD>", "Basic authentication for scanner api.", CommandOptionType.SingleOrNoValue);

            var collectGceInfo = app.Option<bool>("--collectGceInfo", "Read google cluster information from http://metadata.google.internal. Use cluster name as group id if set.", CommandOptionType.NoValue);

            var groupIdOption = app.Option<string>("--groupId:<GROUP_ID>", "Group id", CommandOptionType.SingleOrNoValue);

            app.OnExecute(async () =>
            {
                var config =  GetConfig(proxyHost);
                var k8sClient = new Kubernetes(config);
                var pods = await k8sClient.ListPodForAllNamespacesAsync();

                var images = pods.Items
                    .SelectMany(x => x.Spec.Containers)
                    .Select(x => x.Image)
                    .Where(x => !x.Contains("/google_containers/") && !x.Contains("/google-containers/"))
                    .Distinct();

                var groupId = groupIdOption.Value();

                var callBody = new ReportRequest
                {
                    ScanRequests = images.Select(imageName => new ImageScanRequest { Image = imageName, Meta = $"Group request for {groupId ?? "na"}" }).ToArray()
                };

                if(collectGceInfo.HasValue())
                {
                    var metaApi = new GoogleMetadataApi();
                    groupId = await metaApi.ClusterName();
                    callBody.GroupMeta = await metaApi.ClusterCreatedBy();
                }

                if(apiUriOption.HasValue())
                {
                    var httpClient = new HttpClient();

                    var uri = $"{apiUriOption.Value()}/v1/group/{groupId}";

                    if(basicAuthOption.HasValue())
                    {
                        var byteArray = Encoding.ASCII.GetBytes(basicAuthOption.Value());
                        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
                    }

                    var response = await httpClient.PutAsJsonAsync(uri, callBody);

                    response.EnsureSuccessStatusCode();

                    Console.WriteLine(await response.Content.ReadAsStringAsync());
                }
                else
                {
                    Console.WriteLine("Api uri not set: sending data ignored.");
                    Console.WriteLine(JObject.FromObject(callBody));
                }

                return 0;
            });

            return app.Execute(args);
        }

        private static KubernetesClientConfiguration GetConfig(CommandOption proxyHost)
        {
            if(proxyHost.HasValue() && !string.IsNullOrEmpty(proxyHost.Value()))
                return new KubernetesClientConfiguration { Host = proxyHost.Value() };

            Console.WriteLine($"Proxy not set, using {nameof(KubernetesClientConfiguration.InClusterConfig)}");
            return KubernetesClientConfiguration.InClusterConfig();
        }
    }
}
